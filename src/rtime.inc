write(i,'(A)') "  "
write(i,'(A)') " USE ISO_C_BINDING, ONLY: C_PTR,C_LOC,C_F_POINTER"
write(i,'(A)') " USE MPI"
write(i,'(A)') " IMPLICIT INTEGER(KIND=MPI_ADDRESS_KIND)(I,N),INTEGER (J),LOGICAL(L),TYPE(PM__QBUFFER) (Q)"
write(i,'(A)') " IMPLICIT TYPE(PM__LBUFFER) (R),TYPE(PM__ZBUFFER) (Z),INTEGER(MPI_OFFSET_KIND) (O),TYPE(PM__WBUFFER) (W)"
write(i,'(A)') ""
write(i,'(A)') " INTEGER,PARAMETER:: PM__MAX_FILENAME_SIZE=1024"
write(i,'(A)') " "
write(i,'(A)') " INTEGER,PARAMETER:: PM__LN=MPI_ADDRESS_KIND"
write(i,'(A)') " INTEGER,PARAMETER:: PM__LLN=MPI_OFFSET_KIND"
write(i,'(A)') " INTEGER,PARAMETER:: PM__D=KIND(0.0D0)"
write(i,'(A)') ""
write(i,'(A)') " INTEGER*1 PM__I8_EXAMPLE"
write(i,'(A)') " INTEGER*2 PM__I16_EXAMPLE"
write(i,'(A)') " INTEGER*4 PM__I32_EXAMPLE"
write(i,'(A)') " INTEGER*8 PM__I64_EXAMPLE"
write(i,'(A)') ""
write(i,'(A)') " INTEGER,PARAMETER:: PM__I8=KIND(PM__I8_EXAMPLE)"
write(i,'(A)') " INTEGER,PARAMETER:: PM__I16=KIND(PM__I16_EXAMPLE)"
write(i,'(A)') " INTEGER,PARAMETER:: PM__I32=KIND(PM__I32_EXAMPLE)"
write(i,'(A)') " INTEGER,PARAMETER:: PM__I64=KIND(PM__I64_EXAMPLE)"
write(i,'(A)') " "
call out_types
write(i,'(A)') " "
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT=6"
write(i,'(A)') " INTEGER,PARAMETER:: PM__LONG=7"
write(i,'(A)') " INTEGER,PARAMETER:: PM__LONGLONG=8"
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT8=9"
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT16=10  "
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT32=11"
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT64=12"
write(i,'(A)') " INTEGER,PARAMETER:: PM__INT128=13"
write(i,'(A)') " INTEGER,PARAMETER:: PM__SINGLE=14"
write(i,'(A)') " INTEGER,PARAMETER:: PM__DOUBLE=15"
write(i,'(A)') " INTEGER,PARAMETER:: PM__REAL32=16"
write(i,'(A)') " INTEGER,PARAMETER:: PM__REAL64=17"
write(i,'(A)') " INTEGER,PARAMETER:: PM__REAL128=18"
write(i,'(A)') " INTEGER,PARAMETER:: PM__SINGLE_COMPLEX=19"
write(i,'(A)') " INTEGER,PARAMETER:: PM__DOUBLE_COMPLEX=20"
write(i,'(A)') " INTEGER,PARAMETER:: PM__COMPLEX64=21"
write(i,'(A)') " INTEGER,PARAMETER:: PM__COMPLEX128=22  "
write(i,'(A)') " INTEGER,PARAMETER:: PM__COMPLEX256=23"
write(i,'(A)') " INTEGER,PARAMETER:: PM__LOGICAL=24"
write(i,'(A)') " INTEGER,PARAMETER:: PM__PACKED_LOGICAL=25"
write(i,'(A)') " INTEGER,PARAMETER:: PM__EXT=26"
write(i,'(A)') " INTEGER,PARAMETER:: PM__STRING=27"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__LBUFFER"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(:),ALLOCATABLE:: P"
write(i,'(A)') " END TYPE PM__LBUFFER"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__QBUFFER"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(1):: P"
write(i,'(A)') " END TYPE PM__QBUFFER"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__WBUFFER"
write(i,'(A)') "    INTEGER,DIMENSION(:),ALLOCATABLE:: P"
write(i,'(A)') " END type PM__WBUFFER"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__ZBUFFER"
write(i,'(A)') "    INTEGER,DIMENSION(7):: P"
write(i,'(A)') " END TYPE PM__ZBUFFER"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__STR"
write(i,'(A)') "    CHARACTER(LEN=1),DIMENSION(:),ALLOCATABLE:: P"
write(i,'(A)') " END TYPE PM__STR"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__POLY"
write(i,'(A)') "    CLASS(*),ALLOCATABLE:: P"
write(i,'(A)') " END TYPE PM__POLY"
write(i,'(A)') ""
write(i,'(A)') " ! WRAPPER TYPES FOR POLYMORPHIC INSTANCES OF BASIC VALUES"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__TI"
write(i,'(A)') "    INTEGER:: P"
write(i,'(A)') " END type PM__TI"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TLN"
write(i,'(A)') "    INTEGER(PM__LN):: P"
write(i,'(A)') " END type PM__TLN"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TLLN"
write(i,'(A)') "    INTEGER(PM__LLN):: P"
write(i,'(A)') " END type PM__TLLN"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TI8"
write(i,'(A)') "    INTEGER(PM__I8):: P"
write(i,'(A)') " END type PM__TI8"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__TI16"
write(i,'(A)') "    INTEGER(PM__I16):: P"
write(i,'(A)') " END type PM__TI16"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TI32"
write(i,'(A)') "    INTEGER(PM__I32):: P"
write(i,'(A)') " END type PM__TI32"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TI64"
write(i,'(A)') "    INTEGER(PM__I64):: P"
write(i,'(A)') " END type PM__TI64"
write(i,'(A)') " "
write(i,'(A)') " TYPE PM__TR"
write(i,'(A)') "    REAL:: P"
write(i,'(A)') " END type PM__TR"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TD"
write(i,'(A)') "    DOUBLE PRECISION:: P"
write(i,'(A)') " END TYPE PM__TD"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TC"
write(i,'(A)') "    COMPLEX:: P"
write(i,'(A)') " END type PM__TC"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TDC"
write(i,'(A)') "    COMPLEX(PM__D):: P"
write(i,'(A)') " END type PM__TDC"
write(i,'(A)') ""
write(i,'(A)') " TYPE PM__TL"
write(i,'(A)') "    LOGICAL:: P"
write(i,'(A)') " END TYPE PM__TL"
write(i,'(A)') " "
write(i,'(A)') " ! STACK ENTRY WITH DETAILS OF (POSSIBLY NESTED) PARALLEL STATEMENT"
write(i,'(A)') " TYPE PM__NODE_INFO_FRAME"
write(i,'(A)') "    INTEGER:: THIS_NODE          ! RANK IN COMMUNCATING GROUP"
write(i,'(A)') "    INTEGER:: THIS_NNODE         ! NUM PROCS IN COMMUNICATING GROUP "
write(i,'(A)') "    INTEGER:: THIS_COMM         ! MPI COMMUNICATOR FOR COMM. GROUP."
write(i,'(A)') "    INTEGER:: ROOT_NODE          ! ROOT OF SHARED GROUP (AS RANK IN THIS_COMM)"
write(i,'(A)') "    INTEGER:: SHARED_NODE        ! RANK IN SHARED GROUP"
write(i,'(A)') "                                ! (RUNNING THE SAME INVOCATION)"
write(i,'(A)') "    INTEGER:: SHARED_NNODE       ! NUMBER OF PROCESSES IN SHARED GROUP"
write(i,'(A)') "    INTEGER:: SHARED_COMM       ! MPI COMMUNICATOR FOR SHARED GROUP"
write(i,'(A)') "    LOGICAL:: IS_SHARED         ! PROCESS IS PART OF GROUP, SOME OF WHICH SHARE"
write(i,'(A)') " END TYPE PM__NODE_INFO_FRAME"
write(i,'(A)') " "
write(i,'(A)') " ! TEMPORARY BUFFERS FOR MESSAGES"
write(i,'(A)') " TYPE PM__MBUFFER"
write(i,'(A)') "    TYPE(PM__MBUFFER),POINTER:: NEXT"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(PM__INT:PM__STRING):: SIZEOF"
write(i,'(A)') "    INTEGER,DIMENSION(:),ALLOCATABLE:: I"
write(i,'(A)') "    INTEGER(PM__I8),DIMENSION(:),ALLOCATABLE:: I8"
write(i,'(A)') "    INTEGER(PM__I16),DIMENSION(:),ALLOCATABLE:: I16"
write(i,'(A)') "    INTEGER(PM__I32),DIMENSION(:),ALLOCATABLE:: I32"
write(i,'(A)') "    INTEGER(PM__I64),DIMENSION(:),ALLOCATABLE:: I64"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(:),ALLOCATABLE:: LN"
write(i,'(A)') "    REAL,DIMENSION(:),ALLOCATABLE:: R"
write(i,'(A)') "    REAL(PM__D),DIMENSION(:),ALLOCATABLE:: D"
write(i,'(A)') "    COMPLEX,DIMENSION(:),ALLOCATABLE:: C"
write(i,'(A)') "    COMPLEX(PM__D),DIMENSION(:),ALLOCATABLE:: DC"
write(i,'(A)') "    LOGICAL,DIMENSION(:),ALLOCATABLE:: L"
write(i,'(A)') " END TYPE PM__MBUFFER"
write(i,'(A)') " "
write(i,'(A)') " ! STACK OF PM__NODE_INFO_FRAME STRUCTURES"
write(i,'(A)') " INTEGER,PARAMETER:: PM__MAX_NODE_DEPTH=128"
write(i,'(A)') " TYPE(PM__NODE_INFO_FRAME),DIMENSION(PM__MAX_NODE_DEPTH):: PM__NODE_FRAME"
write(i,'(A)') " INTEGER:: PM__NODE_DEPTH"
write(i,'(A)') " "
write(i,'(A)') " ! MAXIMUM MESSAGE SIZES"
write(i,'(A)') " INTEGER,PARAMETER:: PM__MAX_MESSAGE_SIZE=(HUGE(1)/2)+1"
write(i,'(A)') " INTEGER,PARAMETER:: PM__EXCHANGE_BLOCK= 16*1024 !*1024"
write(i,'(A)') " INTEGER,PARAMETER:: PM__NODE_BLOCK = 64"
write(i,'(A)') " "
write(i,'(A)') " ! STATUS OF AN MPI NODE"
write(i,'(A)') " INTEGER:: PM__CONC_DEPTH"
write(i,'(A)') " INTEGER:: PM__SYS_NODE,PM__SYS_NNODE   ! RANK IN MPI_COMM_WORLD"
write(i,'(A)') " "
write(i,'(A)') " ! STACKS OF PENDING MESSAGES"
write(i,'(A)') " INTEGER,PARAMETER:: PM__MAX_MESSAGES=1024"
write(i,'(A)') " INTEGER,DIMENSION(:),ALLOCATABLE:: PM__MESSAGE_STACK"
write(i,'(A)') " INTEGER:: PM__MESSAGE_TOP"
write(i,'(A)') " INTEGER:: PM__MESSAGE_STACK_SIZE"
write(i,'(A)') " TYPE(PM__MBUFFER),POINTER:: PM__BUFFER"
write(i,'(A)') ""
write(i,'(A)') " INTEGER,DIMENSION(MPI_STATUS_SIZE):: PM__STAT"
write(i,'(A)') " "
write(i,'(A)') " ! DATA TAGS"
write(i,'(A)') " INTEGER,PARAMETER:: PM__REQ_TAG=1"
write(i,'(A)') " INTEGER,PARAMETER:: PM__REQ_TAG2=2"
write(i,'(A)') " INTEGER,PARAMETER:: PM__DATA_TAG=3"
write(i,'(A)') " INTEGER,PARAMETER:: PM__EXTRA_TAG=4"
write(i,'(A)') " INTEGER,PARAMETER:: PM__HDR_TAG=5"
write(i,'(A)') " INTEGER,PARAMETER:: PM__EXTRA_REQ_TAG=6"
write(i,'(A)') " INTEGER,PARAMETER:: PM__EXTRA_REQ_EXTRA_TAG=7"
write(i,'(A)') ""
write(i,'(A)') " ! ALTERNATING REQUEST TAGS"
write(i,'(A)') " INTEGER:: PM__REQUEST=PM__REQ_TAG"
write(i,'(A)') ""
write(i,'(A)') " ! MPI TYPES"
write(i,'(A)') " INTEGER,DIMENSION(:),ALLOCATABLE:: PM__MPI_TYPES"
write(i,'(A)') ""
write(i,'(A)') " CALL PM__INIT_PAR"
write(i,'(A)') ""
write(i,'(A)') " CALL PM__MAKE_MPI_TYPES"
write(i,'(A)') " "
write(i,'(A)') " CALL PM__P0"
write(i,'(A)') ""
write(i,'(A)') " CALL PM__FINALISE_PAR"
write(i,'(A)') " "
write(i,'(A)') "CONTAINS"
write(i,'(A)') ""
call gen_procs
write(i,'(A)') "  "
write(i,'(A)') " PURE FUNCTION PM__STRVAL(C) RESULT(S)"
write(i,'(A)') "   CHARACTER(LEN=*),INTENT(IN):: C"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   INTEGER(PM__LN):: I,N"
write(i,'(A)') "   N=LEN(C,KIND=PM__LN)"
write(i,'(A)') "   ALLOCATE(S%P(N))"
write(i,'(A)') "   DO I=1,N"
write(i,'(A)') "      S%P(I)=C(I:I)"
write(i,'(A)') "   ENDDO"
write(i,'(A)') " END FUNCTION PM__STRVAL"
write(i,'(A)') ""
write(i,'(A)') " PURE FUNCTION PM__CONCAT_STR(S1,S2) RESULT(S)"
write(i,'(A)') "   TYPE(PM__STR),INTENT(IN):: S1,S2"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   INTEGER(PM__LN):: I,N1,N2"
write(i,'(A)') "   N1=SIZE(S1%P,KIND=PM__LN)"
write(i,'(A)') "   N2=SIZE(S2%P,KIND=PM__LN)"
write(i,'(A)') "   ALLOCATE(S%P(N1+N2))"
write(i,'(A)') "   DO I=1,N1"
write(i,'(A)') "      S%P(I)=S1%P(I)"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   DO I=1,N2"
write(i,'(A)') "       S%P(I+N1)=S2%P(I)"
write(i,'(A)') "    ENDDO"
write(i,'(A)') " END FUNCTION PM__CONCAT_STR"
write(i,'(A)') "  "
write(i,'(A)') " PURE FUNCTION PM__INT_TO_STR(I) RESULT(S)"
write(i,'(A)') "   INTEGER,INTENT(IN):: I"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=16):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(I10)') I"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__INT_TO_STR"
write(i,'(A)') ""
write(i,'(A)') " PURE FUNCTION PM__LONG_TO_STR(I) RESULT(S)"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: I"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=24):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(I20)') I"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__LONG_TO_STR"
write(i,'(A)') ""
write(i,'(A)') " PURE FUNCTION PM__OFFSET_TO_STR(I) RESULT(S)"
write(i,'(A)') "   INTEGER(PM__LLN),INTENT(IN):: I"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=34):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(I30)') I"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__OFFSET_TO_STR"
write(i,'(A)') ""
write(i,'(A)') " PURE FUNCTION PM__INT64_TO_STR(I) RESULT(S)"
write(i,'(A)') "   INTEGER(PM__I64),INTENT(IN):: I"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=24):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(I20)') I"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__INT64_TO_STR"
write(i,'(A)') ""
write(i,'(A)') " PURE FUNCTION PM__REAL_TO_STR(R) RESULT(S)"
write(i,'(A)') "   REAL,INTENT(IN):: R"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=16):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(G15.8)') R"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__REAL_TO_STR"
write(i,'(A)') " "
write(i,'(A)') " PURE FUNCTION PM__DOUBLE_TO_STR(R) RESULT(S)"
write(i,'(A)') "   DOUBLE PRECISION,INTENT(IN):: R"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   CHARACTER(LEN=32):: BUFFER"
write(i,'(A)') "   WRITE(BUFFER,'(G25.15)') R"
write(i,'(A)') "   S=PM__STRVAL(TRIM(ADJUSTL(BUFFER)))"
write(i,'(A)') " END FUNCTION PM__DOUBLE_TO_STR"
write(i,'(A)') " "
write(i,'(A)') " PURE FUNCTION PM__BOOL_TO_STR(B) RESULT(S)"
write(i,'(A)') "   LOGICAL,INTENT(IN):: B"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   IF(B) THEN"
write(i,'(A)') "      S=PM__STRVAL('TRUE')"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      S=PM__STRVAL('FALSE')"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END FUNCTION PM__BOOL_TO_STR"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXI(X) RESULT(P)"
write(i,'(A)') "   INTEGER:: X"
write(i,'(A)') "   TYPE(PM__TI)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXI"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXLN(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__LN):: X"
write(i,'(A)') "   TYPE(PM__TLN)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXLN"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXLLN(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__LLN):: X"
write(i,'(A)') "   TYPE(PM__TLLN)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXLLN"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXI8(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__I8):: X"
write(i,'(A)') "   TYPE(PM__TI8)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXI8"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXI16(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__I16):: X"
write(i,'(A)') "   TYPE(PM__TI16)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXI16"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXI32(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__I32):: X"
write(i,'(A)') "   TYPE(PM__TI32)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXI32"
write(i,'(A)') " "
write(i,'(A)') " FUNCTION PM__BOXI64(X) RESULT(P)"
write(i,'(A)') "   INTEGER(PM__I64):: X"
write(i,'(A)') "   TYPE(PM__TI64)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXI64"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXR(X) RESULT(P)"
write(i,'(A)') "   REAL:: X"
write(i,'(A)') "   TYPE(PM__TR)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXR"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXD(X) RESULT(P)"
write(i,'(A)') "   DOUBLE PRECISION:: X"
write(i,'(A)') "   TYPE(PM__TD)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXD"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXC(X) RESULT(P)"
write(i,'(A)') "   COMPLEX:: X"
write(i,'(A)') "   TYPE(PM__TC)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXC"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__BOXDC(X) RESULT(P)"
write(i,'(A)') "   COMPLEX(PM__D):: X"
write(i,'(A)') "   TYPE(PM__TDC)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXDC"
write(i,'(A)') " "
write(i,'(A)') " FUNCTION PM__BOXL(X) RESULT(P)"
write(i,'(A)') "   LOGICAL:: X"
write(i,'(A)') "   TYPE(PM__TL)::P"
write(i,'(A)') "   P%P=X"
write(i,'(A)') " END FUNCTION PM__BOXL"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__PRINT(S)"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   IF(PM__NODE_FRAME(PM__NODE_DEPTH)%ROOT_NODE==PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE) THEN"
write(i,'(A)') "      WRITE(*,*) S%P"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE  PM__PRINT"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__CHECK(S,L)"
write(i,'(A)') "   TYPE(PM__STR):: S"
write(i,'(A)') "   LOGICAL:: L"
write(i,'(A)') "   IF(.NOT.L) CALL PM__PRINT(S)"
write(i,'(A)') " END SUBROUTINE PM__CHECK"
write(i,'(A)') " "
write(i,'(A)') " ! INITIALISE PM MPI SUBSYSTEM"
write(i,'(A)') " SUBROUTINE PM__INIT_PAR()"
write(i,'(A)') "   INTEGER:: ERROR"
write(i,'(A)') "   CALL MPI_INIT(ERROR)"
write(i,'(A)') "   PM__NODE_DEPTH=1"
write(i,'(A)') "   CALL MPI_COMM_SIZE(MPI_COMM_WORLD,PM__SYS_NNODE,ERROR)"
write(i,'(A)') "   CALL MPI_COMM_RANK(MPI_COMM_WORLD,PM__SYS_NODE,ERROR)"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NNODE=PM__SYS_NNODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE=PM__SYS_NODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%ROOT_NODE=0"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM=MPI_COMM_WORLD"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM=MPI_COMM_WORLD"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NODE=PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NNODE=PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NNODE"
write(i,'(A)') "   PM__CONC_DEPTH=0"
write(i,'(A)') "   PM__MESSAGE_TOP=0"
write(i,'(A)') "   PM__MESSAGE_STACK_SIZE=PM__MAX_MESSAGES"
write(i,'(A)') "   ALLOCATE(PM__MESSAGE_STACK(PM__MAX_MESSAGES))"
write(i,'(A)') "   NULLIFY(PM__BUFFER)"
write(i,'(A)') " END SUBROUTINE PM__INIT_PAR"
write(i,'(A)') " "
write(i,'(A)') " ! FINALISE MPI SUBSYSTEM"
write(i,'(A)') " SUBROUTINE PM__FINALISE_PAR()"
write(i,'(A)') "   INTEGER:: ERROR"
write(i,'(A)') "   CALL MPI_FINALIZE(ERROR)"
write(i,'(A)') " END SUBROUTINE PM__FINALISE_PAR"
write(i,'(A)') " "
write(i,'(A)') " ! CREATE A NEW COMMUNICATING GROUP USING MPI SPLIT"
write(i,'(A)') " SUBROUTINE PM__PUSH_NODE_SPLIT(ROOT) "
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: ROOT"
write(i,'(A)') "   INTEGER:: ERROR,NEWCOMM"
write(i,'(A)') "   INTEGER:: THIS_COMM"
write(i,'(A)') "   THIS_COMM=PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM"
write(i,'(A)') "   CALL MPI_COMM_SPLIT(THIS_COMM,INT(ROOT),PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE,&"
write(i,'(A)') "        NEWCOMM,ERROR)"
write(i,'(A)') "   PM__NODE_DEPTH=PM__NODE_DEPTH+1"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%ROOT_NODE=ROOT"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_NODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NNODE=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_NNODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_COMM"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%IS_SHARED=.TRUE."
write(i,'(A)') "   CALL MPI_COMM_SIZE(NEWCOMM,PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NNODE,ERROR)"
write(i,'(A)') "   CALL MPI_COMM_RANK(NEWCOMM,PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NODE,ERROR)"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM=NEWCOMM"
write(i,'(A)') " END SUBROUTINE PM__PUSH_NODE_SPLIT"
write(i,'(A)') " "
write(i,'(A)') " ! NEW FRAME USED FORMER SHARED COMMUNICATOR"
write(i,'(A)') " SUBROUTINE PM__PUSH_NODE_DISTR()"
write(i,'(A)') "   PM__NODE_DEPTH=PM__NODE_DEPTH+1"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NODE=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_NODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%ROOT_NODE=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_NODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_NNODE=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_NNODE"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM=PM__NODE_FRAME(PM__NODE_DEPTH-1)%SHARED_COMM"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM=MPI_COMM_SELF"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NNODE=1"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NODE=0"
write(i,'(A)') "   PM__NODE_FRAME(PM__NODE_DEPTH)%IS_SHARED=.FALSE."
write(i,'(A)') " END SUBROUTINE PM__PUSH_NODE_DISTR"
write(i,'(A)') " "
write(i,'(A)') " ! POP COMMUNICATING GROUP - REVERT TO NEXT OUTER LAYER"
write(i,'(A)') " SUBROUTINE PM__POP_NODE()"
write(i,'(A)') "   INTEGER:: ERROR,OLD_SHARED,OLD_THIS"
write(i,'(A)') "   IF(PM__CONC_DEPTH>0) THEN"
write(i,'(A)') "      PM__CONC_DEPTH=PM__CONC_DEPTH-1"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      OLD_SHARED=PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM"
write(i,'(A)') "      OLD_THIS=PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM"
write(i,'(A)') "      PM__NODE_DEPTH=PM__NODE_DEPTH-1"
write(i,'(A)') "      IF(OLD_THIS/=MPI_COMM_SELF.AND.&"
write(i,'(A)') "           PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM/=OLD_THIS) THEN"
write(i,'(A)') "         CALL MPI_COMM_FREE(OLD_THIS,ERROR)"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "      IF(OLD_SHARED/=MPI_COMM_SELF) THEN"
write(i,'(A)') "         CALL MPI_COMM_FREE(OLD_SHARED,ERROR)"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE PM__POP_NODE"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__GET_SHARED(I) RESULT(NODE)"
write(i,'(A)') "   INTEGER,INTENT(IN):: I"
write(i,'(A)') "   INTEGER:: NODE"
write(i,'(A)') "   INTEGER:: GROUP_S,GROUP_T,ERROR"
write(i,'(A)') "   INTEGER,DIMENSION(1):: IN,OUT"
write(i,'(A)') "   CALL MPI_COMM_GROUP(PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM,GROUP_S,ERROR)"
write(i,'(A)') "   CALL MPI_COMM_GROUP(PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM,GROUP_T,ERROR)"
write(i,'(A)') "   IN(1)=I"
write(i,'(A)') "   CALL MPI_GROUP_TRANSLATE_RANKS(GROUP_S,1,IN,GROUP_T,OUT,ERROR)"
write(i,'(A)') "   NODE=OUT(1)"
write(i,'(A)') " END FUNCTION PM__GET_SHARED"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__GROW_STACK(STACK,STACK_SIZE,NEW_STACK_SIZE)"
write(i,'(A)') "   INTEGER,DIMENSION(:),ALLOCATABLE,INTENT(INOUT):: STACK"
write(i,'(A)') "   INTEGER,INTENT(INOUT):: STACK_SIZE"
write(i,'(A)') "   INTEGER,INTENT(IN):: NEW_STACK_SIZE"
write(i,'(A)') "   INTEGER,DIMENSION(:),ALLOCATABLE:: TEMP"
write(i,'(A)') "   ALLOCATE(TEMP(STACK_SIZE))"
write(i,'(A)') "   CALL MOVE_ALLOC(STACK,TEMP)"
write(i,'(A)') "   ALLOCATE(STACK(NEW_STACK_SIZE))"
write(i,'(A)') "   STACK(1:STACK_SIZE)=TEMP"
write(i,'(A)') "   STACK_SIZE=NEW_STACK_SIZE"
write(i,'(A)') "   DEALLOCATE(TEMP)"
write(i,'(A)') " END SUBROUTINE PM__GROW_STACK"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__GET_MPI_TYPE(TNO,N,MPI_TYP,M,LNEW)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN)::N"
write(i,'(A)') "   INTEGER,INTENT(OUT):: MPI_TYP"
write(i,'(A)') "   INTEGER,INTENT(OUT):: M"
write(i,'(A)') "   LOGICAL,INTENT(OUT):: LNEW"
write(i,'(A)') "   INTEGER:: NEWTYP,K,ERRNO"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(2):: DISPL"
write(i,'(A)') "   INTEGER,DIMENSION(2):: TYP,BLK"
write(i,'(A)') "   IF(N<=PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "      MPI_TYP=TNO"
write(i,'(A)') "      M=N"
write(i,'(A)') "      LNEW=.FALSE."
write(i,'(A)') "      RETURN"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      CALL MPI_TYPE_CONTIGUOUS(PM__MAX_MESSAGE_SIZE,TNO,NEWTYP,ERRNO)"
write(i,'(A)') "      BLK(2)=N/PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      BLK(1)=N-BLK(2)*PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      TYP(2)=NEWTYP"
write(i,'(A)') "      TYP(1)=TNO"
write(i,'(A)') "      CALL MPI_TYPE_SIZE(TYP(1),K,ERRNO)"
write(i,'(A)') "      DISPL(2)=INT(K,PM__LN)*BLK(1)"
write(i,'(A)') "      DISPL(1)=0"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_STRUCT(2,BLK,DISPL,TYP,MPI_TYP,ERRNO)"
write(i,'(A)') "      CALL MPI_TYPE_COMMIT(MPI_TYP,ERRNO)"
write(i,'(A)') "      M=1"
write(i,'(A)') "      LNEW=.TRUE."
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_TYPE"
write(i,'(A)') " "
write(i,'(A)') " FUNCTION PM__GET_MPI_MASKED_TYPE(TNO,MASK,NMASK,M) RESULT(MPI_TYP)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: NMASK,M"
write(i,'(A)') "   LOGICAL,INTENT(IN),DIMENSION(NMASK):: MASK"
write(i,'(A)') "   INTEGER:: MPI_TYP"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(:),ALLOCATABLE:: V"
write(i,'(A)') "   INTEGER(PM__LN):: I,J,N"
write(i,'(A)') "   N=COUNT(MASK)"
write(i,'(A)') "   ALLOCATE(V(N))"
write(i,'(A)') "   J=0"
write(i,'(A)') "   DO I=1,SIZE(MASK)"
write(i,'(A)') "      IF(MASK(I)) THEN"
write(i,'(A)') "         J=J+1"
write(i,'(A)') "         V(J)=I"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   CALL PM__GET_MPI_DISP_TYPE(TNO,V,M,MPI_TYP)"
write(i,'(A)') " END FUNCTION PM__GET_MPI_MASKED_TYPE"
write(i,'(A)') "  "
write(i,'(A)') " ! MAKE A TYPE FROM A SET OF VECTOR OFFSETS"
write(i,'(A)') " RECURSIVE SUBROUTINE PM__GET_MPI_DISP_TYPE(TNO,OFF,M,MPI_TYP)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(:),INTENT(IN):: OFF"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: M"
write(i,'(A)') "   INTEGER,INTENT(OUT):: MPI_TYP"
write(i,'(A)') "   INTEGER:: ERRNO,N"
write(i,'(A)') "   INTEGER(PM__LN):: START,END,I,NOFF"
write(i,'(A)') "   INTEGER(PM__LN),ALLOCATABLE,DIMENSION(:):: DISPS"
write(i,'(A)') "   INTEGER,ALLOCATABLE,DIMENSION(:):: LENS,TYPES"
write(i,'(A)') "   NOFF=SIZE(OFF)"
write(i,'(A)') "   IF(NOFF>PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "      N=(NOFF+PM__MAX_MESSAGE_SIZE-1)/PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      ALLOCATE(DISPS(N),LENS(N),TYPES(N))"
write(i,'(A)') "      DISPS=0"
write(i,'(A)') "      LENS=1"
write(i,'(A)') "      DO I=1,N"
write(i,'(A)') "         START=(N-1)*PM__MAX_MESSAGE_SIZE+1+1"
write(i,'(A)') "         END=MIN(NOFF,N*PM__MAX_MESSAGE_SIZE)+1"
write(i,'(A)') "         CALL PM__GET_MPI_DISP_UNIT_TYPE(TNO,OFF(START:&"
write(i,'(A)') "           END),M,TYPES(I))"
write(i,'(A)') "      ENDDO"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_STRUCT(N,LENS,DISPS,TYPES,MPI_TYP,ERRNO)"
write(i,'(A)') "      DO I=1,N"
write(i,'(A)') "         CALL MPI_TYPE_FREE(TYPES(I),ERRNO)"
write(i,'(A)') "      ENDDO"
write(i,'(A)') "      DEALLOCATE(DISPS,LENS,TYPES)"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      CALL PM__GET_MPI_DISP_UNIT_TYPE(TNO,OFF,M,MPI_TYP)"
write(i,'(A)') "   ENDIF"
write(i,'(A)') "   CALL MPI_TYPE_COMMIT(MPI_TYP,ERRNO)"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_DISP_TYPE"
write(i,'(A)') " "
write(i,'(A)') " RECURSIVE SUBROUTINE PM__GET_MPI_DISP_UNIT_TYPE(TNO,OFF,M,MPI_TYP)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(:),INTENT(IN):: OFF"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: M"
write(i,'(A)') "   INTEGER,INTENT(OUT):: MPI_TYP"
write(i,'(A)') "   INTEGER:: M2,TNO2,SIZ,ERRNO,NOFF"
write(i,'(A)') "   INTEGER(PM__LN),ALLOCATABLE,DIMENSION(:):: DISPS"
write(i,'(A)') "   LOGICAL:: LNEW"
write(i,'(A)') "   NOFF=SIZE(OFF)"
write(i,'(A)') "   CALL MPI_TYPE_SIZE(TNO,SIZ,ERRNO)"
write(i,'(A)') "   DISPS=OFF*(SIZ*M)"
write(i,'(A)') "   IF(M<=PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_HINDEXED_BLOCK(NOFF,INT(M),DISPS,&"
write(i,'(A)') "           TNO,MPI_TYP,ERRNO)"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(TNO,M,TNO2,M2,LNEW)"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_HINDEXED_BLOCK(NOFF,M2,DISPS,&"
write(i,'(A)') "           TNO2,MPI_TYP,ERRNO)"
write(i,'(A)') "      IF(LNEW) CALL MPI_TYPE_FREE(TNO2,ERRNO)"
write(i,'(A)') "   ENDIF"
write(i,'(A)') "   DEALLOCATE(DISPS)"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_DISP_UNIT_TYPE"
write(i,'(A)') ""
write(i,'(A)') " ! CREATE MPI TYPE FOR SUBRANGE (START..END BY STEP [WIDTH,ALIGN]) OF (0..GSIZE)"
write(i,'(A)') " SUBROUTINE PM__GET_MPI_SUBRANGE_TYPE(TNO,START,END,STEP,WIDTH,ALIGN,TNO2)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: START,END,STEP,WIDTH,ALIGN"
write(i,'(A)') "   INTEGER,INTENT(OUT):: TNO2"
write(i,'(A)') "   INTEGER(PM__LN):: N"
write(i,'(A)') "   INTEGER(MPI_COUNT_KIND):: LB,SIZ"
write(i,'(A)') "   INTEGER(MPI_ADDRESS_KIND):: DISPL(3)"
write(i,'(A)') "   INTEGER:: BLK(3),MTYPES(3),ERRNO,M,TNO3"
write(i,'(A)') "   !write(*,*) '#',TNO,START,'..',END,STEP,WIDTH,ALIGN"
write(i,'(A)') "   CALL MPI_TYPE_GET_EXTENT_X(TNO,LB,SIZ,ERRNO)"
write(i,'(A)') "   N=(END-START)/STEP+1"
write(i,'(A)') "   IF(WIDTH>1.AND.(ALIGN>0.OR.START+(N-1)*STEP+WIDTH>END)) THEN"
write(i,'(A)') "      ! PARTIAL BLOCK AT START OR END COMPLICATES THINGS..."
write(i,'(A)') "      IF(N.GT.2) THEN"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO, MAX(0_PM__LN,WIDTH-ALIGN),MTYPES(1),BLK(1))"
write(i,'(A)') "         CALL PM__GET_MPI_STRIDED_BLOCK_TYPE(TNO,MAX(0_PM__LN,N-2),STEP,WIDTH,MTYPES(2),BLK(2))"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO, MIN(WIDTH,END-(START-ALIGN+(N-1)*STEP)),MTYPES(3),BLK(3))"
write(i,'(A)') "         DISPL(1)=START*SIZ"
write(i,'(A)') "         DISPL(2)=(START-ALIGN+STEP)*SIZ"
write(i,'(A)') "         DISPL(3)=(START-ALIGN+(N-1)*STEP)*SIZ"
write(i,'(A)') "         CALL MPI_TYPE_CREATE_STRUCT(3,BLK,DISPL,MTYPES,TNO2,ERRNO)"
write(i,'(A)') "      ELSEIF(N==2) THEN"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO, MAX(0_PM__LN,WIDTH-ALIGN),MTYPES(1),BLK(1))"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO, MIN(WIDTH,END-(START-ALIGN+STEP)+1),MTYPES(2),BLK(2))"
write(i,'(A)') "         DISPL(1)=START*SIZ"
write(i,'(A)') "         DISPL(2)=(START-ALIGN+STEP)*SIZ"
write(i,'(A)') "         CALL MPI_TYPE_CREATE_STRUCT(2,BLK,DISPL,MTYPES,TNO2,ERRNO)"
write(i,'(A)') "      ELSE"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO,MIN(END+1,START-ALIGN+WIDTH)-START,MTYPES(1),BLK(1))"
write(i,'(A)') "         DISPL(1)=START*SIZ"
write(i,'(A)') "         CALL MPI_TYPE_CREATE_STRUCT(1,BLK,DISPL,MTYPES,TNO2,ERRNO)"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      CALL PM__GET_MPI_STRIDED_BLOCK_TYPE(TNO,N,STEP,WIDTH,TNO3,M)"
write(i,'(A)') "      DISPL(1)=START*SIZ"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_HINDEXED_BLOCK(1,M,DISPL,TNO3,TNO2,ERRNO)"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_SUBRANGE_TYPE"
write(i,'(A)') ""
write(i,'(A)') " ! CREATE AN MPI TYPE FOR 0..STEP*N BY STEP WITH GIVEN WIDTH"
write(i,'(A)') " SUBROUTINE PM__GET_MPI_STRIDED_BLOCK_TYPE(TNO,N,STEP,WIDTH,TNO2,COUNT)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: N,STEP,WIDTH"
write(i,'(A)') "   INTEGER,INTENT(OUT):: TNO2,COUNT"
write(i,'(A)') "   INTEGER(MPI_COUNT_KIND):: LB,SIZ"
write(i,'(A)') "   INTEGER(MPI_ADDRESS_KIND):: DISPL(2)"
write(i,'(A)') "   INTEGER:: MTYPES(2),BLK(2)"
write(i,'(A)') "   INTEGER:: TNO3,ERRNO,M"
write(i,'(A)') "   !write(*,*) '>', TNO,N,'>>',STEP,'>>',WIDTH"
write(i,'(A)') "   IF(N==0) THEN"
write(i,'(A)') "      TNO2=TNO"
write(i,'(A)') "   ELSEIF(STEP==1.AND.WIDTH==1) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_CONTIG_TYPE(TNO,N,TNO2,COUNT)"
write(i,'(A)') "   ELSEIF(N<PM__MAX_MESSAGE_SIZE.AND.ABS(STEP)<PM__MAX_MESSAGE_SIZE.AND.WIDTH<PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "      CALL MPI_TYPE_VECTOR(INT(N),INT(WIDTH),INT(STEP),TNO,TNO2,ERRNO)"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      ! AT LEAST SOMETHING IS LARGER THAN PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      ! CONTRUCT BY HAND"
write(i,'(A)') "      "
write(i,'(A)') "      ! FIRST CREATE A BLOCK OF SIZE WIDTH"
write(i,'(A)') "      CALL PM__GET_MPI_CONTIG_TYPE(TNO,WIDTH,TNO3)"
write(i,'(A)') "      "
write(i,'(A)') "      ! THE EXTEND EXTENT OF THIS TYPE TO STEP"
write(i,'(A)') "      IF(ABS(STEP)>1) THEN"
write(i,'(A)') "         CALL MPI_TYPE_GET_EXTENT_X(TNO,LB,SIZ,ERRNO)"
write(i,'(A)') "         CALL MPI_TYPE_CREATE_RESIZED(TNO3,&"
write(i,'(A)') "              INT(0,MPI_ADDRESS_KIND),INT(ABS(STEP)*SIZ,MPI_ADDRESS_KIND),&"
write(i,'(A)') "              TNO2,ERRNO)"
write(i,'(A)') "      ELSE"
write(i,'(A)') "         TNO2=TNO3"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "      "
write(i,'(A)') "      ! NOW REPEAT N TIMES - BACKWARDS IS NECESSARY"
write(i,'(A)') "      IF(STEP>0) THEN"
write(i,'(A)') "         ! POSITIVE STEP - JUST REPEAT TYPE"
write(i,'(A)') "         CALL PM__GET_MPI_CONTIG_TYPE(TNO2,N,TNO3,COUNT)"
write(i,'(A)') "         TNO2=TNO3"
write(i,'(A)') "      ELSEIF(N>PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "         ! NEGATIVE STEP AND LONG SIZE..."
write(i,'(A)') "         CALL MPI_TYPE_GET_EXTENT_X(TNO2,LB,SIZ,ERRNO)"
write(i,'(A)') "         CALL MPI_TYPE_VECTOR(PM__MAX_MESSAGE_SIZE,1,-1,TNO2,TNO3,ERRNO)"
write(i,'(A)') "         M=N/PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "         CALL MPI_TYPE_VECTOR(M,1,-1,TNO3,MTYPES(2),ERRNO)"
write(i,'(A)') "         M=N-PM__MAX_MESSAGE_SIZE*M"
write(i,'(A)') "         CALL MPI_TYPE_VECTOR(M,1,-1,TNO2,MTYPES(1),ERRNO)"
write(i,'(A)') "         DISPL(1)=0"
write(i,'(A)') "         DISPL(2)=-M*SIZ"
write(i,'(A)') "         BLK(1)=1"
write(i,'(A)') "         BLK(2)=1"
write(i,'(A)') "         CALL MPI_TYPE_CREATE_STRUCT(2,BLK,DISPL,MTYPES,TNO2,ERRNO)"
write(i,'(A)') "      ELSE"
write(i,'(A)') "         ! NEGATIVE STEP"
write(i,'(A)') "         CALL MPI_TYPE_VECTOR(INT(N),1,-1,TNO,TNO2,ERRNO)"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_STRIDED_BLOCK_TYPE"
write(i,'(A)') " "
write(i,'(A)') " ! MPI TYPE - REPEAT N TIMES"
write(i,'(A)') " ! (OPTIONALLY CREATE SMALLER TYPE TO REPEAT COUNT TIMES"
write(i,'(A)') " ! WHERE COUNT IS STANDARD INT)"
write(i,'(A)') " SUBROUTINE PM__GET_MPI_CONTIG_TYPE(TNO,N,TNO2,COUNT)"
write(i,'(A)') "   INTEGER,INTENT(IN):: TNO"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: N"
write(i,'(A)') "   INTEGER,INTENT(OUT):: TNO2"
write(i,'(A)') "   INTEGER,INTENT(OUT),OPTIONAL:: COUNT"
write(i,'(A)') "   INTEGER(MPI_ADDRESS_KIND):: DISPL(2)"
write(i,'(A)') "   INTEGER(MPI_COUNT_KIND):: LB,SIZ"
write(i,'(A)') "   INTEGER:: MTYPES(2),BLK(2),ERRNO"
write(i,'(A)') "   IF(N<=1) THEN"
write(i,'(A)') "      TNO2=TNO"
write(i,'(A)') "      IF(PRESENT(COUNT)) COUNT=N"
write(i,'(A)') "   ELSEIF(N>PM__MAX_MESSAGE_SIZE) THEN"
write(i,'(A)') "      CALL MPI_TYPE_CONTIGUOUS(PM__MAX_MESSAGE_SIZE,TNO,TNO2,ERRNO)"
write(i,'(A)') "      CALL MPI_TYPE_GET_EXTENT_X(TNO2,LB,SIZ,ERRNO)"
write(i,'(A)') "      MTYPES(1)=TNO"
write(i,'(A)') "      MTYPES(2)=TNO2"
write(i,'(A)') "      BLK(2)=N/PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      BLK(1)=N-BLK(2)*PM__MAX_MESSAGE_SIZE"
write(i,'(A)') "      DISPL(1)=0"
write(i,'(A)') "      DISPL(2)=SIZ*BLK(1)"
write(i,'(A)') "      CALL MPI_TYPE_CREATE_STRUCT(2,BLK,DISPL,MTYPES,TNO2,ERRNO)"
write(i,'(A)') "      IF(PRESENT(COUNT)) COUNT=1"
write(i,'(A)') "   ELSEIF(.NOT.PRESENT(COUNT)) THEN"
write(i,'(A)') "      CALL MPI_TYPE_CONTIGUOUS(INT(N),TNO,TNO2,ERRNO)"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      TNO2=TNO"
write(i,'(A)') "      COUNT=N"
write(i,'(A)') "   ENDIF"
write(i,'(A)') " END SUBROUTINE PM__GET_MPI_CONTIG_TYPE"
write(i,'(A)') "  "
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   INTEGER,INTENT(IN):: MESS"
write(i,'(A)') "   PM__MESSAGE_TOP=PM__MESSAGE_TOP+1"
write(i,'(A)') "   IF(PM__MESSAGE_TOP>=PM__MESSAGE_STACK_SIZE) THEN"
write(i,'(A)') "      CALL PM__GROW_STACK(PM__MESSAGE_STACK,PM__MESSAGE_STACK_SIZE,PM__MESSAGE_STACK_SIZE*2)"
write(i,'(A)') "   ENDIF"
write(i,'(A)') "   PM__MESSAGE_STACK(PM__MESSAGE_TOP)=MESS"
write(i,'(A)') " END SUBROUTINE PM__PUSH_MESSAGE"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__COMPLETE_MESSAGES()"
write(i,'(A)') "   INTEGER,DIMENSION(PM__MAX_MESSAGES):: STATUS"
write(i,'(A)') "   INTEGER:: ERRNO,I,RQ,ISTAT(MPI_STATUS_SIZE)"
write(i,'(A)') "   INTEGER(PM__LN):: J"
write(i,'(A)') "   CALL MPI_WAITALL(PM__MESSAGE_TOP,PM__MESSAGE_STACK,&"
write(i,'(A)') "        MPI_STATUSES_IGNORE,ERRNO)"
write(i,'(A)') "   CALL PM__TIDY_MESSAGES()"
write(i,'(A)') " END SUBROUTINE PM__COMPLETE_MESSAGES"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__TIDY_MESSAGES()"
write(i,'(A)') "   INTEGER:: I,ERRNO"
write(i,'(A)') "   TYPE(PM__MBUFFER),POINTER::P"
write(i,'(A)') "   IF(PM__MESSAGE_STACK_SIZE>PM__MAX_MESSAGES) THEN"
write(i,'(A)') "      DEALLOCATE(PM__MESSAGE_STACK)"
write(i,'(A)') "      ALLOCATE(PM__MESSAGE_STACK(PM__MAX_MESSAGES))"
write(i,'(A)') "      PM__MESSAGE_STACK_SIZE=PM__MAX_MESSAGES"
write(i,'(A)') "   ENDIF"
write(i,'(A)') "   PM__MESSAGE_TOP=0"
write(i,'(A)') "   CALL PM__FREE_BUFFERS"
write(i,'(A)') " END SUBROUTINE PM__TIDY_MESSAGES"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__NEW_BUFFER() "
write(i,'(A)') "   TYPE(PM__MBUFFER),POINTER:: P"
write(i,'(A)') "   ALLOCATE(P)"
write(i,'(A)') "   P%NEXT=>PM__BUFFER"
write(i,'(A)') "   P%SIZEOF=0"
write(i,'(A)') "   PM__BUFFER=>P"
write(i,'(A)') " END SUBROUTINE PM__NEW_BUFFER"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__POP_BUFFER()"
write(i,'(A)') "   TYPE(PM__MBUFFER),POINTER:: P"
write(i,'(A)') "   P=>PM__BUFFER"
write(i,'(A)') "   PM__BUFFER=>P%NEXT"
write(i,'(A)') "   DEALLOCATE(P)"
write(i,'(A)') " END SUBROUTINE PM__POP_BUFFER"
write(i,'(A)') ""
write(i,'(A)') " SUBROUTINE PM__FREE_BUFFERS()"
write(i,'(A)') "   TYPE(PM__MBUFFER),POINTER:: P"
write(i,'(A)') "   DO WHILE(ASSOCIATED(PM__BUFFER))"
write(i,'(A)') "      P=>PM__BUFFER%NEXT"
write(i,'(A)') "      DEALLOCATE(PM__BUFFER)"
write(i,'(A)') "      PM__BUFFER=>P"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   NULLIFY(PM__BUFFER)"
write(i,'(A)') " END SUBROUTINE PM__FREE_BUFFERS"
write(i,'(A)') ""
write(i,'(A)') " SUBROUTINE PM__ALLOCATE_BUFFER"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT).GT.0) ALLOCATE(PM__BUFFER%I(PM__BUFFER%SIZEOF(PM__INT)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT8).GT.0) ALLOCATE(PM__BUFFER%I8(PM__BUFFER%SIZEOF(PM__INT8)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT16).GT.0) ALLOCATE(PM__BUFFER%I16(PM__BUFFER%SIZEOF(PM__INT16)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT32).GT.0) ALLOCATE(PM__BUFFER%I32(PM__BUFFER%SIZEOF(PM__INT32)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT64).GT.0) ALLOCATE(PM__BUFFER%I64(PM__BUFFER%SIZEOF(PM__INT64)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LONG).GT.0) ALLOCATE(PM__BUFFER%LN(PM__BUFFER%SIZEOF(PM__LONG)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__SINGLE).GT.0) ALLOCATE(PM__BUFFER%R(PM__BUFFER%SIZEOF(PM__SINGLE)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE).GT.0) ALLOCATE(PM__BUFFER%D(PM__BUFFER%SIZEOF(PM__DOUBLE)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX).GT.0) ALLOCATE(PM__BUFFER%C(PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX).GT.0) ALLOCATE(PM__BUFFER%DC(PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX)))"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LOGICAL).GT.0) ALLOCATE(PM__BUFFER%L(PM__BUFFER%SIZEOF(PM__LOGICAL)))"
write(i,'(A)') "   PM__BUFFER%SIZEOF=0"
write(i,'(A)') " END SUBROUTINE PM__ALLOCATE_BUFFER"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__ISEND_BUFFER(NODE,ATAG,COMM)"
write(i,'(A)') "   INTEGER,INTENT(IN):: NODE"
write(i,'(A)') "   INTEGER,INTENT(IN):: ATAG,COMM"
write(i,'(A)') "   INTEGER:: MESS,ERRNO,TNO,M,TAG"
write(i,'(A)') "   LOGICAL:: MUST_FREE"
write(i,'(A)') "   TAG=ATAG+1"
write(i,'(A)') "   !write(*,*) 'sending buffer:',pm__buffer%sizeof"
write(i,'(A)') "   CALL MPI_ISEND(PM__BUFFER%SIZEOF,PM__STRING-PM__INT+1,MPI_AINT,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "   CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER,PM__BUFFER%SIZEOF(PM__INT),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%I,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT8).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER1,PM__BUFFER%SIZEOF(PM__INT8),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%I8,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT16).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER2,PM__BUFFER%SIZEOF(PM__INT16),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%I16,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT32).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER4,PM__BUFFER%SIZEOF(PM__INT32),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%I32,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "     IF(PM__BUFFER%SIZEOF(PM__INT64).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER8,PM__BUFFER%SIZEOF(PM__INT64),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%I64,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   "
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LONG).GT.0) THEN"
write(i,'(A)') "      !write(*,*) 'sending',PM__BUFFER%LN,'from',pm__sys_node,'to',node"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_AINT,PM__BUFFER%SIZEOF(PM__LONG),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%LN,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__SINGLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_REAL,PM__BUFFER%SIZEOF(PM__SINGLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%R,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE,PM__BUFFER%SIZEOF(PM__DOUBLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%D,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "     IF(PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_COMPLEX,PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%C,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE_COMPLEX,PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%DC,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LOGICAL).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_LOGICAL,PM__BUFFER%SIZEOF(PM__LOGICAL),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_ISEND(PM__BUFFER%L,M,TNO,INT(NODE),TAG,COMM,MESS,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "      CALL PM__PUSH_MESSAGE(MESS)"
write(i,'(A)') "   END IF"
write(i,'(A)') " END SUBROUTINE PM__ISEND_BUFFER"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__RECV_BUFFER(NODE,ATAG,COMM)"
write(i,'(A)') "   INTEGER,INTENT(IN):: NODE"
write(i,'(A)') "   INTEGER,INTENT(IN):: ATAG,COMM"
write(i,'(A)') "   INTEGER:: MESS,ERRNO,TNO,M,TAG"
write(i,'(A)') "   LOGICAL:: MUST_FREE"
write(i,'(A)') "   INTEGER(PM__LN):: SIZEOF(PM__INT:PM__STRING)"
write(i,'(A)') "   TAG=ATAG+1"
write(i,'(A)') "   CALL PM__NEW_BUFFER"
write(i,'(A)') "   CALL MPI_RECV(PM__BUFFER%SIZEOF,PM__STRING-PM__INT+1,MPI_AINT,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "   SIZEOF=PM__BUFFER%SIZEOF"
write(i,'(A)') "   CALL PM__ALLOCATE_BUFFER"
write(i,'(A)') "   IF(SIZEOF(PM__INT).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER,SIZEOF(PM__INT),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%I,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__INT8).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER1,SIZEOF(PM__INT8),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%I8,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__INT16).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER2,SIZEOF(PM__INT16),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%I16,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__INT32).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER4,SIZEOF(PM__INT32),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%I32,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__INT64).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER8,SIZEOF(PM__INT64),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%I64,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__LONG).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_AINT,SIZEOF(PM__LONG),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%LN,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__SINGLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_REAL,SIZEOF(PM__SINGLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%R,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__DOUBLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE,SIZEOF(PM__DOUBLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%D,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__SINGLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_COMPLEX,SIZEOF(PM__SINGLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%C,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__DOUBLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE_COMPLEX,SIZEOF(PM__DOUBLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%DC,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(SIZEOF(PM__LOGICAL).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_LOGICAL,SIZEOF(PM__LOGICAL),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_RECV(PM__BUFFER%L,M,TNO,INT(NODE),TAG,COMM,MPI_STATUS_IGNORE,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   PM__BUFFER%SIZEOF=0"
write(i,'(A)') " END SUBROUTINE PM__RECV_BUFFER"
write(i,'(A)') ""
write(i,'(A)') " SUBROUTINE PM__BCAST_BUFFER(NODE,XCOMM)"
write(i,'(A)') "   INTEGER,INTENT(IN):: NODE"
write(i,'(A)') "   INTEGER,INTENT(IN),OPTIONAL:: XCOMM"
write(i,'(A)') "   INTEGER:: COMM"
write(i,'(A)') "   INTEGER:: ERRNO,TNO,M"
write(i,'(A)') "   LOGICAL:: MUST_FREE"
write(i,'(A)') "   IF(PRESENT(XCOMM)) THEN"
write(i,'(A)') "      COMM=XCOMM"
write(i,'(A)') "   ELSE"
write(i,'(A)') "      COMM=PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM"
write(i,'(A)') "   ENDIF"
write(i,'(A)') "   CALL MPI_BCAST(PM__BUFFER%SIZEOF,PM__STRING-PM__INT+1,MPI_AINT,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER,PM__BUFFER%SIZEOF(PM__INT),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%I,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT8).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER1,PM__BUFFER%SIZEOF(PM__INT8),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%I8,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT16).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER2,PM__BUFFER%SIZEOF(PM__INT16),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%I16,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT32).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER4,PM__BUFFER%SIZEOF(PM__INT32),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%I32,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__INT64).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_INTEGER8,PM__BUFFER%SIZEOF(PM__INT64),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%I64,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LONG).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_AINT,PM__BUFFER%SIZEOF(PM__LONG),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%LN,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__SINGLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_REAL,PM__BUFFER%SIZEOF(PM__SINGLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%R,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE,PM__BUFFER%SIZEOF(PM__DOUBLE),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%D,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_COMPLEX,PM__BUFFER%SIZEOF(PM__SINGLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%C,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_DOUBLE_COMPLEX,PM__BUFFER%SIZEOF(PM__DOUBLE_COMPLEX),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%DC,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') "   IF(PM__BUFFER%SIZEOF(PM__LOGICAL).GT.0) THEN"
write(i,'(A)') "      CALL PM__GET_MPI_TYPE(MPI_LOGICAL,PM__BUFFER%SIZEOF(PM__LOGICAL),TNO,M,MUST_FREE)"
write(i,'(A)') "      CALL MPI_BCAST(PM__BUFFER%L,M,TNO,INT(NODE),COMM,ERRNO)"
write(i,'(A)') "      IF(MUST_FREE) CALL MPI_TYPE_FREE(TNO,ERRNO)"
write(i,'(A)') "   END IF"
write(i,'(A)') " END SUBROUTINE PM__BCAST_BUFFER"
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__TEST_LOOP(OK) RESULT(ALLOK)"
write(i,'(A)') "   LOGICAL,INTENT(IN):: OK"
write(i,'(A)') "   LOGICAL:: ALLOK"
write(i,'(A)') "   CALL MPI_ALLREDUCE(OK,ALLOK,1,MPI_LOGICAL,MPI_LOR,PM__NODE_FRAME(PM__NODE_DEPTH)%THIS_COMM,JERRNO)"
write(i,'(A)') " END FUNCTION PM__TEST_LOOP"
write(i,'(A)') ""
write(i,'(A)') " SUBROUTINE PM__MASK_OFFSETS(N,OFFSETS,MASK,COUNT)"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: N"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(INOUT),DIMENSION(N):: OFFSETS"
write(i,'(A)') "   LOGICAL,INTENT(IN),DIMENSION(N):: MASK"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(OUT):: COUNT"
write(i,'(A)') "   INTEGER(PM__LN):: I,M"
write(i,'(A)') "   M=0"
write(i,'(A)') "   DO I=1,N"
write(i,'(A)') "      IF(MASK(I)) THEN"
write(i,'(A)') "         M=M+1"
write(i,'(A)') "         OFFSETS(M)=OFFSETS(I)"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   COUNT=M"
write(i,'(A)') " END SUBROUTINE PM__MASK_OFFSETS"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__COLLATE_MESSAGES(NODE,ISTART,N,NNODE,START,FROM)"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: NODE"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: ISTART,N,NNODE"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(0:NNODE),INTENT(INOUT):: START"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(N),INTENT(INOUT):: FROM"
write(i,'(A)') "   INTEGER(PM__LN):: I,M,TOT"
write(i,'(A)') "   INTEGER:: P"
write(i,'(A)') "   START(0:NNODE)=0"
write(i,'(A)') "   DO I=1,N"
write(i,'(A)') "      P=NODE(I+ISTART-1)"
write(i,'(A)') "      START(P)=START(P)+1"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   TOT=1"
write(i,'(A)') "   DO I=0,NNODE"
write(i,'(A)') "      M=START(I)"
write(i,'(A)') "      TOT=TOT+M"
write(i,'(A)') "      START(I)=TOT"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   DO I=N,1,-1"
write(i,'(A)') "      P=NODE(I+ISTART-1)"
write(i,'(A)') "      M=START(P)-1"
write(i,'(A)') "      FROM(M)=I-1+ISTART-1"
write(i,'(A)') "      START(P)=M"
write(i,'(A)') "   ENDDO"
write(i,'(A)') " END SUBROUTINE PM__COLLATE_MESSAGES"
write(i,'(A)') " "
write(i,'(A)') " SUBROUTINE PM__COLLATE_MESSAGES_MASKED(NODE,N,NNODE,START,FROM,VE,BEGIN)"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: NODE"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: N,NNODE"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(0:NNODE),INTENT(INOUT):: START"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(N),INTENT(INOUT):: FROM"
write(i,'(A)') "   LOGICAL,DIMENSION(:),INTENT(IN):: VE"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(INOUT):: BEGIN"
write(i,'(A)') "   INTEGER(PM__LN):: I,M,TOT,FINISH,COUNT"
write(i,'(A)') "   INTEGER:: P"
write(i,'(A)') "   START(0:NNODE)=0"
write(i,'(A)') "   I=BEGIN"
write(i,'(A)') "   COUNT=0"
write(i,'(A)') "   DO WHILE(COUNT<N)"
write(i,'(A)') "      IF(VE(I)) THEN"
write(i,'(A)') "         P=NODE(I)"
write(i,'(A)') "         START(P)=START(P)+1"
write(i,'(A)') "         COUNT=COUNT+1"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "      I=I+1"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   FINISH=I-1"
write(i,'(A)') "   TOT=1"
write(i,'(A)') "   DO I=0,NNODE"
write(i,'(A)') "      M=START(I)"
write(i,'(A)') "      TOT=TOT+M"
write(i,'(A)') "      START(I)=TOT"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   DO I=FINISH,1,-1"
write(i,'(A)') "      IF(VE(I)) THEN"
write(i,'(A)') "         P=NODE(I)"
write(i,'(A)') "         M=START(P)-1"
write(i,'(A)') "         FROM(M)=I-1"
write(i,'(A)') "         START(P)=M"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDDO"
write(i,'(A)') "   BEGIN=FINISH"
write(i,'(A)') " END SUBROUTINE PM__COLLATE_MESSAGES_MASKED"
write(i,'(A)') ""
write(i,'(A)') " SUBROUTINE PM__GET_SHARED_RANKS(RANKS,NUMRANKS)"
write(i,'(A)') "   INTEGER,ALLOCATABLE,DIMENSION(:),INTENT(INOUT)::RANKS"
write(i,'(A)') "   INTEGER,INTENT(OUT):: NUMRANKS"
write(i,'(A)') "   NUMRANKS=0"
write(i,'(A)') " END SUBROUTINE PM__GET_SHARED_RANKS"
write(i,'(A)') " "
write(i,'(A)') ""
write(i,'(A)') " FUNCTION PM__WSHARE(WORK,NNODE,SNODE,NSNODE) RESULT(NODE)"
write(i,'(A)') "   INTEGER(PM__LN),INTENT(IN):: NNODE,SNODE,NSNODE"
write(i,'(A)') "   INTEGER(PM__LN),DIMENSION(NNODE):: WORK"
write(i,'(A)') "   INTEGER(PM__LN):: NODE"
write(i,'(A)') "   INTEGER(PM__LN):: I,S,Z"
write(i,'(A)') "   S=SUM(WORK(1:NNODE))"
write(i,'(A)') "   Z=S*(2_PM__LN*SNODE+1_PM__LN)/(2_PM__LN*NSNODE)"
write(i,'(A)') "   DO I=1,NNODE"
write(i,'(A)') "      Z=Z-WORK(I)"
write(i,'(A)') "      IF(Z<=0) THEN"
write(i,'(A)') "         NODE=I-1"
write(i,'(A)') "         RETURN"
write(i,'(A)') "      ENDIF"
write(i,'(A)') "   ENDDO"
write(i,'(A)') " END FUNCTION PM__WSHARE"
write(i,'(A)') ""
write(i,'(A)') " PURE SUBROUTINE PM__INTERSECT_SEQ(L1,U1,S1,N1,L2,U2,S2,N2,L3,U3,S3,N3)"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: L1,U1,S1,N1,L2,U2,S2,N2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: L3,U3,S3,N3"
write(i,'(A)') "    INTEGER(PM__LN):: C,U,V,G,S,NLO,NHI,UP1,UP2,AS1,AS2,AS3"
write(i,'(A)') "    !WRITE(*,*) 'INTERSECT_SEQ>',L1,U1,S1,N1,L2,U2,S2,N2"
write(i,'(A)') "    IF(N1==0.OR.N2==0) THEN"
write(i,'(A)') "       L3=0"
write(i,'(A)') "       U3=-1"
write(i,'(A)') "       S3=1"
write(i,'(A)') "       N3=0"
write(i,'(A)') "       RETURN"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    AS1=ABS(S1)"
write(i,'(A)') "    AS2=ABS(S2)"
write(i,'(A)') "    C=L1-L2"
write(i,'(A)') "    CALL PM__EXTENDED_GCD(-AS1,AS2,U,V,G)"
write(i,'(A)') "    IF(MOD(C,G)/=0) THEN"
write(i,'(A)') "       L3=0"
write(i,'(A)') "       U3=-1"
write(i,'(A)') "       S3=1"
write(i,'(A)') "       N3=0"
write(i,'(A)') "       RETURN"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    UP1=L1+(U1-L1)/S1*S1"
write(i,'(A)') "    UP2=L2+(U2-L2)/S2*S2"
write(i,'(A)') "    S=C/G*U*S1+L1"
write(i,'(A)') "    S3=(AS1/ABS(G))*S2"
write(i,'(A)') "    AS3=ABS(S3)"
write(i,'(A)') "    NLO=MAX(MIN(L1,UP1),MIN(L2,UP2))-S"
write(i,'(A)') "    IF(NLO>0) THEN"
write(i,'(A)') "       NLO=(NLO-1)/AS3+1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       NLO=NLO/AS3"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    NHI=MIN(MAX(L1,UP1),MAX(L2,UP2))-S"
write(i,'(A)') "    IF(NHI<0) THEN"
write(i,'(A)') "       NHI=(NHI+1)/AS3-1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       NHI=NHI/AS3"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    L3=S+NLO*AS3"
write(i,'(A)') "    U3=S+NHI*AS3"
write(i,'(A)') "    N3=NHI-NLO+1"
write(i,'(A)') "    IF(S3<0) THEN"
write(i,'(A)') "       C=U3"
write(i,'(A)') "       U3=L3"
write(i,'(A)') "       L3=C"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__INTERSECT_SEQ"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__EXTENDED_GCD(A,B,U,V,G)"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: A,B"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: U,V,G"
write(i,'(A)') "    INTEGER(PM__LN):: S,OLD_S,R,OLD_R,T,OLD_T,TEMP,Q"
write(i,'(A)') "    S=0"
write(i,'(A)') "    OLD_S=1"
write(i,'(A)') "    T=1"
write(i,'(A)') "    OLD_T=0"
write(i,'(A)') "    R=B"
write(i,'(A)') "    OLD_R=A"
write(i,'(A)') "    DO WHILE(R/=0)"
write(i,'(A)') "       Q=OLD_R/R"
write(i,'(A)') "       TEMP=OLD_R-Q*R"
write(i,'(A)') "       OLD_R=R"
write(i,'(A)') "       R=TEMP"
write(i,'(A)') "       TEMP=OLD_S-Q*S"
write(i,'(A)') "       OLD_S=S"
write(i,'(A)') "       S=TEMP"
write(i,'(A)') "       TEMP=OLD_T-Q*T"
write(i,'(A)') "       OLD_T=T"
write(i,'(A)') "       T=TEMP"
write(i,'(A)') "    ENDDO"
write(i,'(A)') "    U=OLD_S"
write(i,'(A)') "    V=OLD_T"
write(i,'(A)') "    G=OLD_R"
write(i,'(A)') "  END SUBROUTINE PM__EXTENDED_GCD"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__INTERSECT_ASEQ(A1,N1,A2,N2,A3,N3)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A1,A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N1,N2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A3"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N3"
write(i,'(A)') "    INTEGER(PM__LN):: I,J,K"
write(i,'(A)') "    LOGICAL:: A1ASC,A2ASC"
write(i,'(A)') "    A1ASC=.TRUE."
write(i,'(A)') "    A2ASC=.TRUE."
write(i,'(A)') "    IF(N1>1) A1ASC=A1(2)>A1(1)"
write(i,'(A)') "    IF(N2>1) A2ASC=A2(2)>A2(1)"
write(i,'(A)') "    IF(A1ASC) THEN"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=A1(I)"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=A1(I)"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1     "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=A1(I)"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1   "
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=A1(I)"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1         "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__INTERSECT_ASEQ"
write(i,'(A)') ""
write(i,'(A)') "  FUNCTION PM__ASEQ_INCLUDES(A1,N1,A2,N2) RESULT(OK)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A1,A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N1,N2"
write(i,'(A)') "    LOGICAL:: OK"
write(i,'(A)') "    INTEGER(PM__LN):: I,J"
write(i,'(A)') "    LOGICAL:: A1ASC,A2ASC"
write(i,'(A)') "    OK=.FALSE."
write(i,'(A)') "    IF(N1==0.OR.N2==0) RETURN"
write(i,'(A)') "    IF(MAX(A1(1),A1(N1)) < MIN(A2(1),A2(N2)).OR.MAX(A2(1),A2(N2)) < MIN(A1(1),A1(N1))) RETURN"
write(i,'(A)') "    A1ASC=.TRUE."
write(i,'(A)') "    A2ASC=.TRUE."
write(i,'(A)') "    IF(N1>1) A1ASC=A1(2)>A1(1)"
write(i,'(A)') "    IF(N2>1) A2ASC=A2(2)>A2(1)"
write(i,'(A)') "    IF(A1ASC) THEN"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO J=1,N2"
write(i,'(A)') "             DO WHILE(I<=N1.AND.A1(I)<A2(J))"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "             IF(A1(I)/=A2(J)) THEN"
write(i,'(A)') "                OK=.FALSE."
write(i,'(A)') "                RETURN"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          OK=.TRUE."
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO J=N2,1,-1"
write(i,'(A)') "             DO WHILE(I<=N1.AND.A1(I)<A2(J))"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "             IF(A1(I)/=A2(J)) THEN"
write(i,'(A)') "                OK=.FALSE."
write(i,'(A)') "                RETURN"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          OK=.TRUE."
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          DO J=1,N2"
write(i,'(A)') "             DO WHILE(I>0.AND.A1(I)<A2(J))"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "             IF(A1(I)/=A2(J)) THEN"
write(i,'(A)') "                OK=.FALSE."
write(i,'(A)') "                RETURN"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          OK=.TRUE."
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          DO J=N2,1,-1"
write(i,'(A)') "             DO WHILE(I>0.AND.A1(I)<A2(J))"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "             IF(A1(I)/=A2(J)) THEN"
write(i,'(A)') "                OK=.FALSE."
write(i,'(A)') "                RETURN"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          OK=.TRUE."
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END FUNCTION PM__ASEQ_INCLUDES"
write(i,'(A)') "  "
write(i,'(A)') "  PURE SUBROUTINE PM__OVERLAP_ASEQ(A1,N1,A2,N2,A3,N3)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A1,A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N1,N2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A3"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N3"
write(i,'(A)') "    INTEGER(PM__LN):: I,J,K"
write(i,'(A)') "    LOGICAL:: A1ASC,A2ASC"
write(i,'(A)') "    A1ASC=.TRUE."
write(i,'(A)') "    A2ASC=.TRUE."
write(i,'(A)') "    IF(N1>1) A1ASC=A1(2)>A1(1)"
write(i,'(A)') "    IF(N2>1) A2ASC=A2(2)>A2(1)"
write(i,'(A)') "    IF(A1ASC) THEN"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1     "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1   "
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1         "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__OVERLAP_ASEQ"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__OVERLAP_ASEQ2(A1,N1,A2,N2,A3,A4,N3)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A1,A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N1,N2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A3,A4"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N3"
write(i,'(A)') "    INTEGER(PM__LN):: I,J,K"
write(i,'(A)') "    LOGICAL:: A1ASC,A2ASC"
write(i,'(A)') "    A1ASC=.TRUE."
write(i,'(A)') "    A2ASC=.TRUE."
write(i,'(A)') "    IF(N1>1) A1ASC=A1(2)>A1(1)"
write(i,'(A)') "    IF(N2>1) A2ASC=A2(2)>A2(1)"
write(i,'(A)') "    IF(A1ASC) THEN"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                A4(K)=J-1"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                A4(K)=J-1"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1     "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(A2ASC) THEN"
write(i,'(A)') "          I=N1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I>0.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)<A2(J)) THEN"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                A4(K)=J-1"
write(i,'(A)') "                I=I-1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1   "
write(i,'(A)') "       ELSE"
write(i,'(A)') "          I=1"
write(i,'(A)') "          J=1"
write(i,'(A)') "          K=1"
write(i,'(A)') "          DO WHILE(I<=N1.AND.J<=N2)"
write(i,'(A)') "             IF(A1(I)>A2(J)) THEN"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "             ELSEIF(A1(I)==A2(J)) THEN"
write(i,'(A)') "                A3(K)=I-1"
write(i,'(A)') "                A4(K)=J-1"
write(i,'(A)') "                I=I+1"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ELSE"
write(i,'(A)') "                J=J+1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          N3=K-1         "
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__OVERLAP_ASEQ2"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__INTERSECT_BSEQ(L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2,A,N)"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N"
write(i,'(A)') "    INTEGER(PM__LN):: START,FINISH,ACTUAL_FINISH,FIRST1,LAST1,FIRST2,LAST2"
write(i,'(A)') "    INTEGER(PM__LN):: W1,W2,I,J,K,KK,BSTART1,BEND1,BSTART2,BEND2,U,V,GCD,JCYCLE"
write(i,'(A)') ""
write(i,'(A)') "    W1=WD1-1"
write(i,'(A)') "    W2=WD2-1"
write(i,'(A)') "    START=MAX(L1,L2)"
write(i,'(A)') "    ACTUAL_FINISH=MIN(H1,H2)"
write(i,'(A)') "    IF(ST1==ST2) THEN"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+ST1-1)"
write(i,'(A)') "       JCYCLE=ST1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       CALL PM__EXTENDED_GCD(ST1,ST2,U,V,GCD)"
write(i,'(A)') "       JCYCLE=ST1*ST2/GCD"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+JCYCLE-1)"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    FIRST1=((START+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "    FIRST2=((START+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "    BSTART1=FIRST1+AL1"
write(i,'(A)') "    BEND1=FIRST1+W1"
write(i,'(A)') "    BSTART2=FIRST2+AL2"
write(i,'(A)') "    BEND2=FIRST2+W2"
write(i,'(A)') "    K=1"
write(i,'(A)') "    DO I=MAX(BSTART1,BSTART2),MIN(BEND1,BEND2,FINISH)"
write(i,'(A)') "       A(K)=I"
write(i,'(A)') "       K=K+1"
write(i,'(A)') "    END DO"
write(i,'(A)') "    IF(ST1<=ST2) THEN"
write(i,'(A)') "       LAST1=((FINISH+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "       IF(LAST1>FIRST1) THEN"
write(i,'(A)') "          DO J=FIRST1+ST1,LAST1-1,ST1"
write(i,'(A)') "             IF(BEND2<J) THEN"
write(i,'(A)') "                BEND2=BEND2+ST2"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2)"
write(i,'(A)') "                A(K)=I"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             END DO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST1"
write(i,'(A)') "          IF(BEND2<J) THEN"
write(i,'(A)') "             BEND2=BEND2+ST2"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2,FINISH)"
write(i,'(A)') "             A(K)=I"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       LAST2=((FINISH+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "       IF(LAST2>FIRST2) THEN"
write(i,'(A)') "          DO J=FIRST2+ST2,LAST2-1,ST2"
write(i,'(A)') "             IF(BEND1<J) THEN"
write(i,'(A)') "                BEND1=BEND1+ST1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1)"
write(i,'(A)') "                A(K)=I"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             END DO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST2"
write(i,'(A)') "          IF(BEND1<J) THEN"
write(i,'(A)') "             BEND1=BEND1+ST1"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1,FINISH)"
write(i,'(A)') "             A(K)=I"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    "
write(i,'(A)') "    KK=K-1"
write(i,'(A)') "    IF(FINISH<ACTUAL_FINISH.AND.KK>0) THEN"
write(i,'(A)') "       J=JCYCLE"
write(i,'(A)') "       DO WHILE(J+A(KK)<=ACTUAL_FINISH)"
write(i,'(A)') "          DO I=1,KK"
write(i,'(A)') "             A(K)=A(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=J+JCYCLE"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       IF(J+A(1)<=ACTUAL_FINISH) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO WHILE(A(I)+J<=ACTUAL_FINISH)"
write(i,'(A)') "             A(K)=A(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "             I=I+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    N=K-1"
write(i,'(A)') "  END SUBROUTINE PM__INTERSECT_BSEQ"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__OVERLAP_BSEQ(L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2,A,N)"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N"
write(i,'(A)') "    INTEGER(PM__LN):: START,FINISH,ACTUAL_FINISH,FIRST1,LAST1,FIRST2,LAST2"
write(i,'(A)') "    INTEGER(PM__LN):: W1,W2,I,J,JJ,K,KK,BSTART1,BEND1,BSTART2,BEND2,U,V,GCD,JCYCLE"
write(i,'(A)') "    INTEGER(PM__LN):: SPAN,NB,JFINISH"
write(i,'(A)') ""
write(i,'(A)') "    W1=WD1-1"
write(i,'(A)') "    W2=WD2-1"
write(i,'(A)') "    START=MAX(L1,L2)"
write(i,'(A)') "    ACTUAL_FINISH=MIN(H1,H2)"
write(i,'(A)') "    IF(ST1==ST2) THEN"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+ST1-1)"
write(i,'(A)') "       JCYCLE=1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       CALL PM__EXTENDED_GCD(ST1,ST2,U,V,GCD)"
write(i,'(A)') "       JCYCLE=ST2/GCD"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+JCYCLE*ST1-1)"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    FIRST1=((START+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "    FIRST2=((START+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "    BSTART1=FIRST1+AL1"
write(i,'(A)') "    BEND1=FIRST1+W1"
write(i,'(A)') "    BSTART2=FIRST2+AL2"
write(i,'(A)') "    BEND2=FIRST2+W2"
write(i,'(A)') "    K=1"
write(i,'(A)') "    DO I=MAX(BSTART1,BSTART2),MIN(BEND1,BEND2,FINISH)"
write(i,'(A)') "       A(K)=I-L1"
write(i,'(A)') "       K=K+1"
write(i,'(A)') "    END DO"
write(i,'(A)') "    JJ=WD1-AL1"
write(i,'(A)') "    IF(ST1<=ST2) THEN"
write(i,'(A)') "       LAST1=((FINISH+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "       IF(LAST1>FIRST1) THEN"
write(i,'(A)') "          DO J=FIRST1+ST1,LAST1-1,ST1"
write(i,'(A)') "             IF(BEND2<J) THEN"
write(i,'(A)') "                BEND2=BEND2+ST2"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2)"
write(i,'(A)') "                A(K)=I-J+JJ"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             END DO"
write(i,'(A)') "             JJ=JJ+WD1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST1"
write(i,'(A)') "          IF(BEND2<J) THEN"
write(i,'(A)') "             BEND2=BEND2+ST2"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2,FINISH)"
write(i,'(A)') "             A(K)=I-J+JJ"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       LAST2=((FINISH+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "       IF(LAST2>FIRST2) THEN"
write(i,'(A)') "          DO J=FIRST2+ST2,LAST2-1,ST2"
write(i,'(A)') "             IF(BEND1<J) THEN"
write(i,'(A)') "                BEND1=BEND1+ST1"
write(i,'(A)') "                JJ=JJ+WD1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1)"
write(i,'(A)') "                A(K)=I-(BEND1-W1)+JJ"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             END DO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST2"
write(i,'(A)') "          IF(BEND1<J) THEN"
write(i,'(A)') "             BEND1=BEND1+ST1"
write(i,'(A)') "             JJ=JJ+WD1"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1,FINISH)"
write(i,'(A)') "             A(K)=I-(BEND1-W1)+JJ"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    "
write(i,'(A)') "    KK=K-1"
write(i,'(A)') "    IF(FINISH<ACTUAL_FINISH.AND.KK>0) THEN"
write(i,'(A)') "       SPAN=ACTUAL_FINISH-L1+AL1"
write(i,'(A)') "       NB=SPAN/ST1"
write(i,'(A)') "       JFINISH=MIN(WD1,SPAN-NB*ST1)+NB*WD1-1-AL1"
write(i,'(A)') "       JCYCLE=JCYCLE*WD1"
write(i,'(A)') "       J=JCYCLE"
write(i,'(A)') "       DO WHILE(J+A(KK)<=JFINISH)"
write(i,'(A)') "          DO I=1,KK"
write(i,'(A)') "             A(K)=A(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=J+JCYCLE"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       IF(J+A(1)<=JFINISH) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO WHILE(A(I)+J<=JFINISH)"
write(i,'(A)') "             A(K)=A(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "             I=I+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    N=K-1"
write(i,'(A)') "  END SUBROUTINE PM__OVERLAP_BSEQ"
write(i,'(A)') ""
write(i,'(A)') "  PURE SUBROUTINE PM__OVERLAP_BSEQ2(L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2,A1,A2,N)"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: L1,H1,WD1,ST1,AL1,L2,H2,WD2,ST2,AL2"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A1,A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N"
write(i,'(A)') "    INTEGER(PM__LN):: START,FINISH,ACTUAL_FINISH,FIRST1,LAST1,FIRST2,LAST2"
write(i,'(A)') "    INTEGER(PM__LN):: W1,W2,I,J,JJ1,JJ2,K,KK,BSTART1,BEND1,BSTART2,BEND2,U,V,GCD,JCYCLE"
write(i,'(A)') "    INTEGER(PM__LN):: SPAN,NB,JFINISH"
write(i,'(A)') ""
write(i,'(A)') "    W1=WD1-1"
write(i,'(A)') "    W2=WD2-1"
write(i,'(A)') "    START=MAX(L1,L2)"
write(i,'(A)') "    ACTUAL_FINISH=MIN(H1,H2)"
write(i,'(A)') "    IF(ST1==ST2) THEN"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+ST1-1)"
write(i,'(A)') "       GCD=ST1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       CALL PM__EXTENDED_GCD(ST1,ST2,U,V,GCD)"
write(i,'(A)') "       FINISH=MIN(ACTUAL_FINISH,START+ST1*ST2/GCD-1)"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    FIRST1=((START+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "    FIRST2=((START+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "    BSTART1=FIRST1+AL1"
write(i,'(A)') "    BEND1=FIRST1+W1"
write(i,'(A)') "    BSTART2=FIRST2+AL2"
write(i,'(A)') "    BEND2=FIRST2+W2"
write(i,'(A)') "    K=1"
write(i,'(A)') "    DO I=MAX(BSTART1,BSTART2),MIN(BEND1,BEND2,FINISH)"
write(i,'(A)') "       A1(K)=I-L1"
write(i,'(A)') "       A2(K)=I-L2"
write(i,'(A)') "       K=K+1"
write(i,'(A)') "    END DO"
write(i,'(A)') "    JJ1=WD1-AL1"
write(i,'(A)') "    JJ2=-AL2"
write(i,'(A)') "    IF(ST1<=ST2) THEN"
write(i,'(A)') "       LAST1=((FINISH+AL1-L1)/ST1)*ST1+L1-AL1"
write(i,'(A)') "       IF(LAST1>FIRST1) THEN"
write(i,'(A)') "          DO J=FIRST1+ST1,LAST1-1,ST1"
write(i,'(A)') "             IF(BEND2<J) THEN"
write(i,'(A)') "                BEND2=BEND2+ST2"
write(i,'(A)') "                JJ2=JJ2+WD2"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2)"
write(i,'(A)') "                A1(K)=I-J+JJ1"
write(i,'(A)') "                A2(K)=I-(BEND2-W2)+JJ2"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             END DO"
write(i,'(A)') "             JJ1=JJ1+WD1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST1"
write(i,'(A)') "          IF(BEND2<J) THEN"
write(i,'(A)') "             BEND2=BEND2+ST2"
write(i,'(A)') "             JJ2=JJ2+WD2"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND2-W2),MIN(J+W1,BEND2,FINISH)"
write(i,'(A)') "             A1(K)=I-J+JJ1"
write(i,'(A)') "             A2(K)=I-(BEND2-W2)+JJ2"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       LAST2=((FINISH+AL2-L2)/ST2)*ST2+L2-AL2"
write(i,'(A)') "       IF(LAST2>FIRST2) THEN"
write(i,'(A)') "          DO J=FIRST2+ST2,LAST2-1,ST2"
write(i,'(A)') "             JJ2=JJ2+WD2"
write(i,'(A)') "             IF(BEND1<J) THEN"
write(i,'(A)') "                BEND1=BEND1+ST1"
write(i,'(A)') "                JJ1=JJ1+WD1"
write(i,'(A)') "             ENDIF"
write(i,'(A)') "             DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1)"
write(i,'(A)') "                A1(K)=I-(BEND1-W1)+JJ1"
write(i,'(A)') "                A2(K)=I-J+JJ2"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "                JJ2=JJ2+WD2"
write(i,'(A)') "             END DO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=LAST2"
write(i,'(A)') "          IF(BEND1<J) THEN"
write(i,'(A)') "             BEND1=BEND1+ST1"
write(i,'(A)') "             JJ1=JJ1+WD1"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "          DO I=MAX(J,BEND1-W1),MIN(J+W2,BEND1,FINISH)"
write(i,'(A)') "             A1(K)=I-(BEND1-W1)+JJ1"
write(i,'(A)') "             A2(K)=I-J+JJ2"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    "
write(i,'(A)') "    KK=K-1"
write(i,'(A)') "    IF(FINISH<ACTUAL_FINISH.AND.KK>0) THEN"
write(i,'(A)') "       SPAN=ACTUAL_FINISH-L1+AL1"
write(i,'(A)') "       NB=SPAN/ST1"
write(i,'(A)') "       JFINISH=MIN(WD1,SPAN-NB*ST1)+NB*WD1-1-AL1"
write(i,'(A)') "       JCYCLE=WD1*ST2/GCD"
write(i,'(A)') "       J=JCYCLE"
write(i,'(A)') "       DO WHILE(J+A1(KK)<=JFINISH)"
write(i,'(A)') "          DO I=1,KK"
write(i,'(A)') "             A1(K)=A1(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=J+JCYCLE"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       IF(J+A1(1)<=JFINISH) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO WHILE(A1(I)+J<=JFINISH)"
write(i,'(A)') "             A1(K)=A1(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "             I=I+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "       K=KK+1"
write(i,'(A)') "       SPAN=ACTUAL_FINISH-L2+AL2"
write(i,'(A)') "       NB=SPAN/ST2"
write(i,'(A)') "       JFINISH=MIN(WD2,SPAN-NB*ST2)+NB*WD2-1-AL2"
write(i,'(A)') "       JCYCLE=ST1*WD2/GCD"
write(i,'(A)') "       J=JCYCLE"
write(i,'(A)') "       DO WHILE(J+A2(KK)<=JFINISH)"
write(i,'(A)') "          DO I=1,KK"
write(i,'(A)') "             A2(K)=A2(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=J+JCYCLE"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       IF(J+A2(1)<=JFINISH) THEN"
write(i,'(A)') "          I=1"
write(i,'(A)') "          DO WHILE(A2(I)+J<=JFINISH)"
write(i,'(A)') "             A2(K)=A2(I)+J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "             I=I+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    "
write(i,'(A)') "    N=K-1"
write(i,'(A)') "  END SUBROUTINE PM__OVERLAP_BSEQ2"
write(i,'(A)') "  "
write(i,'(A)') "  PURE SUBROUTINE PM__EXPAND_ASEQ(A1,N1,LO,HI,A2,N2)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A1"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N1,LO,HI"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(OUT):: A2"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(OUT):: N2"
write(i,'(A)') "    INTEGER(PM__LN):: I,J,K,M,S"
write(i,'(A)') "    IF(N1==0) THEN"
write(i,'(A)') "       N2=0"
write(i,'(A)') "       RETURN"
write(i,'(A)') "    ELSEIF(N1==1) THEN"
write(i,'(A)') "       K=1"
write(i,'(A)') "       DO I=A1(1)+LO,A1(1)+HI"
write(i,'(A)') "          A2(K)=I"
write(i,'(A)') "          K=K+1"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "    ELSEIF(HI-LO>0) THEN"
write(i,'(A)') "       K=1"
write(i,'(A)') "       IF(A1(1)<A1(2)) THEN"
write(i,'(A)') "          DO I=1,N1-1"
write(i,'(A)') "             DO J=A1(I)+LO,MIN(A1(I)+HI,A1(I+1)+LO-1)"
write(i,'(A)') "                A2(K)=J"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          DO J=A1(N1)+LO,A1(N1)+HI"
write(i,'(A)') "             A2(K)=J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          DO I=1,N1-1"
write(i,'(A)') "             DO J=A1(I)+HI,MAX(A1(I)+LO,A1(I+1)+HI+1),-1"
write(i,'(A)') "                A2(K)=J"
write(i,'(A)') "                K=K+1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          DO J=A1(N1)+HI,A1(N1)+LO,-1"
write(i,'(A)') "             A2(K)=J"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       J=1"
write(i,'(A)') "       K=1"
write(i,'(A)') "       DO WHILE(J<N1)"
write(i,'(A)') "          M=0"
write(i,'(A)') "          S=A1(J)"
write(i,'(A)') "          DO WHILE(A1(J+1)==A1(J)+1)"
write(i,'(A)') "             M=M+1"
write(i,'(A)') "             J=J+1"
write(i,'(A)') "             IF(J==N1) EXIT"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          DO I=S+LO,S+M+HI"
write(i,'(A)') "             A2(K)=I"
write(i,'(A)') "             K=K+1"
write(i,'(A)') "          ENDDO"
write(i,'(A)') "          J=J+1"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    N2=K-1"
write(i,'(A)') "  END SUBROUTINE PM__EXPAND_ASEQ"
write(i,'(A)') ""
write(i,'(A)') "  FUNCTION PM__ASEQ_INDEX(A,N,V) RESULT(INDEX)"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(*),INTENT(IN):: A"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: N"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: V"
write(i,'(A)') "    INTEGER(PM__LN):: INDEX"
write(i,'(A)') "    INTEGER(PM__LN):: LEFT,RIGHT,MIDDLE"
write(i,'(A)') "    LEFT=1"
write(i,'(A)') "    RIGHT=N+1"
write(i,'(A)') "    IF(A(1)<A(2)) THEN"
write(i,'(A)') "       IF(V<A(1)) THEN"
write(i,'(A)') "          INDEX=-1"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "       DO WHILE(LEFT<RIGHT-1)"
write(i,'(A)') "          MIDDLE=(LEFT+RIGHT)/2"
write(i,'(A)') "          IF(A(MIDDLE)<=V) THEN"
write(i,'(A)') "             LEFT=MIDDLE"
write(i,'(A)') "          ELSE"
write(i,'(A)') "             RIGHT=MIDDLE"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       INDEX=LEFT-1"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(V<A(N)) THEN"
write(i,'(A)') "          INDEX=N"
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "       DO WHILE(LEFT<RIGHT-1)"
write(i,'(A)') "          MIDDLE=(LEFT+RIGHT)/2"
write(i,'(A)') "          IF(A(MIDDLE)>V) THEN"
write(i,'(A)') "             LEFT=MIDDLE"
write(i,'(A)') "          ELSE"
write(i,'(A)') "             RIGHT=MIDDLE"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       INDEX=RIGHT-1"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END FUNCTION PM__ASEQ_INDEX"
write(i,'(A)') ""
write(i,'(A)') "  FUNCTION PM__FILE_OPEN(NAME,APPEND,CREATE,TEMP,EXCL,READABLE,&"
write(i,'(A)') "       WRITEABLE,SEQUENTIAL,IERR) RESULT(HANDLE)"
write(i,'(A)') "    CHARACTER(LEN=1),DIMENSION(:),INTENT(IN)::NAME"
write(i,'(A)') "    LOGICAL,INTENT(IN):: APPEND,CREATE,TEMP,EXCL,READABLE,&"
write(i,'(A)') "         WRITEABLE,SEQUENTIAL"
write(i,'(A)') "    INTEGER,INTENT(OUT):: IERR"
write(i,'(A)') "    INTEGER:: HANDLE"
write(i,'(A)') "    INTEGER:: MODE,I"
write(i,'(A)') "    CHARACTER(LEN=PM__MAX_FILENAME_SIZE):: FNAME"
write(i,'(A)') "    MODE=0"
write(i,'(A)') "    IF(APPEND) MODE=IOR(MODE,MPI_MODE_APPEND)"
write(i,'(A)') "    IF(CREATE) MODE=IOR(MODE,MPI_MODE_CREATE)"
write(i,'(A)') "    IF(EXCL) MODE=IOR(MODE,MPI_MODE_EXCL)"
write(i,'(A)') "    IF(TEMP)   MODE=IOR(MODE,MPI_MODE_DELETE_ON_CLOSE)"
write(i,'(A)') "    IF(SEQUENTIAL) MODE=IOR(MODE,MPI_MODE_SEQUENTIAL)"
write(i,'(A)') "    IF(READABLE.AND.WRITEABLE) THEN"
write(i,'(A)') "       MODE=IOR(MODE,MPI_MODE_RDWR)"
write(i,'(A)') "    ELSEIF(.NOT.(READABLE.OR.WRITEABLE)) THEN"
write(i,'(A)') "       IF(SEQUENTIAL) THEN"
write(i,'(A)') "          MODE=IOR(MODE,MPI_MODE_RDONLY)"
write(i,'(A)') "       ELSE"
write(i,'(A)') "          MODE=IOR(MODE,MPI_MODE_RDWR)"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       IF(READABLE) MODE=IOR(MODE,MPI_MODE_RDONLY)"
write(i,'(A)') "       IF(WRITEABLE) MODE=IOR(MODE,MPI_MODE_WRONLY)"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "    FNAME=' '"
write(i,'(A)') "    DO I=1,MIN(SIZE(NAME),PM__MAX_FILENAME_SIZE)"
write(i,'(A)') "       FNAME(I:I)=NAME(I)"
write(i,'(A)') "    ENDDO"
write(i,'(A)') "    CALL MPI_FILE_OPEN(PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM,TRIM(FNAME),&"
write(i,'(A)') "         MODE,MPI_INFO_NULL,HANDLE,IERR)"
write(i,'(A)') "  END FUNCTION PM__FILE_OPEN"
write(i,'(A)') ""
write(i,'(A)') "  SUBROUTINE PM__SYNC_FILE_WRITE(IFILE,IERR)"
write(i,'(A)') "    INTEGER,INTENT(INOUT):: IFILE,IERR"
write(i,'(A)') "    INTEGER(MPI_OFFSET_KIND),DIMENSION(2):: MESS"
write(i,'(A)') "    INTEGER(MPI_OFFSET_KIND):: OFFSET"
write(i,'(A)') "    IF(PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_NODE==0) THEN"
write(i,'(A)') "       CALL MPI_FILE_GET_POSITION(IFILE,OFFSET,JERRNO)"
write(i,'(A)') "       MESS(1)=IERR"
write(i,'(A)') "       MESS(2)=OFFSET"
write(i,'(A)') "       CALL MPI_BCAST(MESS,2,MPI_OFFSET,0,PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM,JERRNO)"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       CALL MPI_BCAST(MESS,2,MPI_OFFSET,0,PM__NODE_FRAME(PM__NODE_DEPTH)%SHARED_COMM,JERRNO)"
write(i,'(A)') "       IERR=MESS(1)"
write(i,'(A)') "       IF(IERR==0) CALL MPI_FILE_SEEK(IFILE,MESS(2),MPI_SEEK_SET,JERRNO)"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__SYNC_FILE_WRITE"
write(i,'(A)') ""
write(i,'(A)') "  SUBROUTINE PM__FILE_SET_VIEW(IFILE,ITYPE,OFFSETS,NOFF,TOTSIZE,IERR,DISP)"
write(i,'(A)') "    INTEGER,INTENT(IN):: IFILE,ITYPE"
write(i,'(A)') "    INTEGER(PM__LN),INTENT(IN):: NOFF,TOTSIZE"
write(i,'(A)') "    INTEGER(PM__LN),DIMENSION(NOFF),INTENT(IN):: OFFSETS"
write(i,'(A)') "    INTEGER,INTENT(INOUT):: IERR"
write(i,'(A)') "    INTEGER(MPI_OFFSET_KIND),INTENT(OUT):: DISP"
write(i,'(A)') "    INTEGER:: SIZE,CTYPE,MTYPE"
write(i,'(A)') "    CALL MPI_TYPE_SIZE(ITYPE,SIZE,IERR)"
write(i,'(A)') "    CALL MPI_FILE_GET_POSITION(IFILE,DISP,IERR)"
write(i,'(A)') "    IF(IERR/=MPI_SUCCESS) RETURN"
write(i,'(A)') "    CALL PM__GET_MPI_DISP_TYPE(ITYPE,OFFSETS,1_PM__LN,CTYPE)"
write(i,'(A)') "    CALL MPI_TYPE_CREATE_RESIZED(CTYPE,0_PM__LN,TOTSIZE*SIZE,MTYPE,IERR)"
write(i,'(A)') "    CALL MPI_FILE_SET_VIEW(IFILE,DISP,ITYPE,MTYPE,'NATIVE',MPI_INFO_NULL,IERR)"
write(i,'(A)') "    DISP=DISP+TOTSIZE*SIZE"
write(i,'(A)') "  END SUBROUTINE PM__FILE_SET_VIEW"
write(i,'(A)') ""
write(i,'(A)') "  SUBROUTINE PM__FILE_RESET_VIEW(IFILE,DISP,IERR)"
write(i,'(A)') "    INTEGER,INTENT(IN):: IFILE"
write(i,'(A)') "    INTEGER(MPI_OFFSET_KIND),INTENT(IN):: DISP"
write(i,'(A)') "    INTEGER,INTENT(INOUT):: IERR"
write(i,'(A)') "    CALL MPI_FILE_SET_VIEW(IFILE,0_PM__LN,MPI_BYTE,MPI_BYTE,'NATIVE',MPI_INFO_NULL,IERR)"
write(i,'(A)') "    IF(IERR/=MPI_SUCCESS) RETURN"
write(i,'(A)') "    CALL MPI_FILE_SEEK(IFILE,DISP,MPI_SEEK_SET,IERR)"
write(i,'(A)') "  END SUBROUTINE PM__FILE_RESET_VIEW"
write(i,'(A)') ""
write(i,'(A)') "  ! GET CARTESIAN DIMENSIONS "
write(i,'(A)') "  SUBROUTINE PM__GET_DIMS(SHARED_NNODE,NDIMS,DIMS)"
write(i,'(A)') "    INTEGER,INTENT(IN):: NDIMS"
write(i,'(A)') "    INTEGER,DIMENSION(NDIMS),INTENT(INOUT):: DIMS"
write(i,'(A)') "    INTEGER,INTENT(IN):: SHARED_NNODE"
write(i,'(A)') "    INTEGER:: NNODES,ERROR,I,J,NREQUIRED"
write(i,'(A)') "    LOGICAL:: HAS_ZERO"
write(i,'(A)') "    DO I=1,NDIMS"
write(i,'(A)') "       IF(DIMS(I)<0) THEN"
write(i,'(A)') "          DIMS=1"
write(i,'(A)') "          DIMS(1)=HUGE(1)"
write(i,'(A)') "          RETURN"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ENDDO"
write(i,'(A)') "    IF(SHARED_NNODE>1) THEN"
write(i,'(A)') "       NREQUIRED=1"
write(i,'(A)') "       HAS_ZERO=.TRUE."
write(i,'(A)') "       DO I=1,NDIMS"
write(i,'(A)') "          IF(DIMS(I)/=0) THEN"
write(i,'(A)') "             NREQUIRED=NREQUIRED*DIMS(I)"
write(i,'(A)') "          ELSE"
write(i,'(A)') "             HAS_ZERO=.TRUE."
write(i,'(A)') "          ENDIF"
write(i,'(A)') "       ENDDO"
write(i,'(A)') "       IF(NREQUIRED>=SHARED_NNODE) THEN"
write(i,'(A)') "          IF(HAS_ZERO) THEN"
write(i,'(A)') "             DO I=1,NDIMS"
write(i,'(A)') "                IF(DIMS(I)==0) DIMS(I)=1"
write(i,'(A)') "             ENDDO"
write(i,'(A)') "          ENDIF"
write(i,'(A)') "       ELSEIF(HAS_ZERO) THEN"
write(i,'(A)') "          NNODES=(SHARED_NNODE/NREQUIRED)*NREQUIRED"
write(i,'(A)') "          CALL MPI_DIMS_CREATE(NNODES,NDIMS,DIMS,ERROR)"
write(i,'(A)') "       ENDIF"
write(i,'(A)') "    ELSE"
write(i,'(A)') "       DIMS=1"
write(i,'(A)') "    ENDIF"
write(i,'(A)') "  END SUBROUTINE PM__GET_DIMS"
write(i,'(A)') ""
write(i,'(A)') "  FUNCTION PM__IO_ERROR_STRING(N) RESULT(S)"
write(i,'(A)') "    INTEGER,INTENT(IN):: N"
write(i,'(A)') "    TYPE(PM__STR):: S"
write(i,'(A)') "    CHARACTER(LEN=MPI_MAX_ERROR_STRING):: MESS"
write(i,'(A)') "    INTEGER:: LENGTH,IERR"
write(i,'(A)') "    CALL MPI_ERROR_STRING(N,MESS,LENGTH,IERR)"
write(i,'(A)') "    S=PM__STRVAL(TRIM(MESS(INDEX(MESS,':')+1:)))"
write(i,'(A)') "  END FUNCTION PM__IO_ERROR_STRING"
write(i,'(A)') ""
write(i,'(A)') "  SUBROUTINE PM__ABORT(S)"
write(i,'(A)') "    TYPE(PM__STR):: S"
write(i,'(A)') "    INTEGER:: IERR"
write(i,'(A)') "    WRITE(*,*) '====  RUNTIME ERROR ===='"
write(i,'(A)') "    CALL PM__PRINT(S)"
write(i,'(A)') "    CALL MPI_ABORT(MPI_COMM_WORLD,1,IERR)"
write(i,'(A)') "  END SUBROUTINE PM__ABORT"
